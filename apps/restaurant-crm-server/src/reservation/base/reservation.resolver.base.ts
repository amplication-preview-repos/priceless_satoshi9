/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Reservation } from "./Reservation";
import { ReservationCountArgs } from "./ReservationCountArgs";
import { ReservationFindManyArgs } from "./ReservationFindManyArgs";
import { ReservationFindUniqueArgs } from "./ReservationFindUniqueArgs";
import { CreateReservationArgs } from "./CreateReservationArgs";
import { UpdateReservationArgs } from "./UpdateReservationArgs";
import { DeleteReservationArgs } from "./DeleteReservationArgs";
import { Client } from "../../client/base/Client";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { Table } from "../../table/base/Table";
import { ReservationService } from "../reservation.service";
@graphql.Resolver(() => Reservation)
export class ReservationResolverBase {
  constructor(protected readonly service: ReservationService) {}

  async _reservationsMeta(
    @graphql.Args() args: ReservationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Reservation])
  async reservations(
    @graphql.Args() args: ReservationFindManyArgs
  ): Promise<Reservation[]> {
    return this.service.reservations(args);
  }

  @graphql.Query(() => Reservation, { nullable: true })
  async reservation(
    @graphql.Args() args: ReservationFindUniqueArgs
  ): Promise<Reservation | null> {
    const result = await this.service.reservation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Reservation)
  async createReservation(
    @graphql.Args() args: CreateReservationArgs
  ): Promise<Reservation> {
    return await this.service.createReservation({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,

        restaurant: args.data.restaurant
          ? {
              connect: args.data.restaurant,
            }
          : undefined,

        table: args.data.table
          ? {
              connect: args.data.table,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Reservation)
  async updateReservation(
    @graphql.Args() args: UpdateReservationArgs
  ): Promise<Reservation | null> {
    try {
      return await this.service.updateReservation({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,

          restaurant: args.data.restaurant
            ? {
                connect: args.data.restaurant,
              }
            : undefined,

          table: args.data.table
            ? {
                connect: args.data.table,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Reservation)
  async deleteReservation(
    @graphql.Args() args: DeleteReservationArgs
  ): Promise<Reservation | null> {
    try {
      return await this.service.deleteReservation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  async getClient(
    @graphql.Parent() parent: Reservation
  ): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurant",
  })
  async getRestaurant(
    @graphql.Parent() parent: Reservation
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Table, {
    nullable: true,
    name: "table",
  })
  async getTable(@graphql.Parent() parent: Reservation): Promise<Table | null> {
    const result = await this.service.getTable(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
